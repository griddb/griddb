/*
   Copyright (c) 2017 TOSHIBA Digital Solutions Corporation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package com.toshiba.mwcloud.gs;

import java.util.Arrays;

import com.toshiba.mwcloud.gs.common.BasicBuffer;
import com.toshiba.mwcloud.gs.common.GSErrorCode;
import com.toshiba.mwcloud.gs.common.GeometryUtils;
import com.toshiba.mwcloud.gs.common.GeometryUtils.DirectAccessor;

/**
 * <div lang="ja">
 * 2次元、もしくは3次元の空間範囲を示すジオメトリデータを管理します。
 *
 * <p>このクラスのインスタンスは不変です。また、このクラスのインスタンスに対する
 * メソッド呼び出しはスレッド安全です。</p>
 * </div><div lang="en">
 * Manages the geometry data which represents geometry range of two or three
 * dimensions.
 *
 * <p>An instance of this class are immutable. In addition, all method calls to
 * an instance of this class are thread safe.</p>
 * </div>
 */
public class Geometry {

	static {
		GeometryUtils.setDirectAccessor(new DirectAccessor() {

			@Override
			public int getBytesLength(Geometry geometry) {
				return geometry.bytesData.length;
			}

			@Override
			public void putGeometry(BasicBuffer out, Geometry geometry) {
				out.prepare(geometry.bytesData.length);
				out.base().put(geometry.bytesData);
			}

			@Override
			public Geometry getGeometry(BasicBuffer in, int size) {
				final byte[] bytesData = new byte[size];
				in.base().get(bytesData);
				return new Geometry(bytesData);
			}

		});
	}

	private final byte[] bytesData;

	private Geometry(byte[] bytesData) {
		this.bytesData = bytesData;
	}

	/**
	 * <div lang="ja">
	 * WKT(Well-Known Text)形式によるジオメトリデータの文字列表現(WKT表現)から
	 * {@link Geometry}を作成します。
	 *
	 * <p>サポート対象のWKT表現は、TQLの{@code ST_GeomFromText}関数が
	 * 扱う表現範囲と同一です。ただし、空間構造{@code QUADRATICSURFACE}は
	 * コンテナに格納することはできず、検索条件としてのみ使用できます。</p>
	 *
	 * @param value 生成対象のWKT表現。{@code null}は指定できない
	 *
	 * @return WKT表現より生成された{@link Geometry}インスタンス
	 *
	 * @throws IllegalArgumentException 指定の文字列がWKT形式と
	 * 一致しない場合
	 * @throws NullPointerException 引数に{@code null}が指定された場合
	 * </div><div lang="en">
	 * Creates the {@link Geometry} from the string representation
	 * (WKT representation) to geometry data in WKT (Well-Known Text) format.
	 *
	 * <p>Supported WKT representation is the same as the representation range
	 * to be handled by {@code ST_GeomFromText} function in TQL. However,
	 * the geometry structure {@code QUADRATICSURFACE} can only be used as
	 * search condition and not to be stored in the container.</p>
	 *
	 * @param value WKT representation to be created. {@code null} cannot be specified
	 *
	 * @return Instance of {@link Geometry} created by WKT representation
	 *
	 * @throws IllegalArgumentException If the specified string does not match
	 * to the WKT format
	 * @throws IllegalArgumentException when {@code null} is specified as argument
	 * </div>
	 */
	public static Geometry valueOf(String value)
			throws IllegalArgumentException {
		try {
			return new Geometry(GeometryUtils.encodeGeometry(value));
		}
		catch (GSException e) {
			throw new IllegalArgumentException(
					"Illegal geometry format (value=\"" + value + "\", " +
					"reason=" + e.getMessage() + ")", e);
		}
		catch (NullPointerException e) {
			throw GSErrorCode.checkNullParameter(value, "value", e);
		}
	}

	/**
	 * <div lang="ja">
	 * WKT(Well-Known Text)形式による文字列表現(WKT表現)を返します。
	 *
	 * <p>返却される文字列は、区切り文字としての空白文字の有無や
	 * デフォルト値のSRID表記の有無といった表記の揺れによっては、
	 * {@link #valueOf(String)}により生成した際に指定したWKT表現と比べて
	 * 等価ではない文字列となる場合があります。</p>
	 * </div><div lang="en">
	 * Returns the string representation (WKT representation) in WKT
	 * (Well-Known Text) format.
	 *
	 * <p>Returned string may not be equivalent to the specified WKT
	 * representation when generated by {@link #valueOf(String)}, if there are
	 * inconsistent spelling such as blank character as a delimiter or the
	 * default SRID values.</p>
	 * </div>
	 */
	@Override
	public String toString() {
		try {
			return GeometryUtils.decodeGeometry(bytesData);
		}
		catch (GSException e) {
			throw new Error(
					"Internal error or decode error of remote data (reason=" +
					e.getMessage() + ")", e);
		}
	}

	/**
	 * <div lang="ja">
	 * このオブジェクトのハッシュコード値を返します。
	 *
	 * <p>このメソッドは、{@link Object#hashCode()}にて定義されている汎用規約に
	 * 準拠します。したがって、等価なオブジェクトのハッシュコード値は等価です。</p>
	 *
	 * @return このオブジェクトのハッシュコード値
	 *
	 * @see #equals(Object)
	 * </div><div lang="en">
	 * Returns the hash code of this object.
	 *
	 * <p>This method maintain the general contract for the
	 * {@link Object#hashCode()} method, which states that equal objects must
	 * have equal hash codes.</p>
	 *
	 * @return Hash code of this object
	 *
	 * @see #equals(Object)
	 * </div>
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(bytesData);
		return result;
	}

	/**
	 * <div lang="ja">
	 * このオブジェクトと他のオブジェクトが等しいかどうかを示します。
	 *
	 * <p>{@link #valueOf(String)}により生成したオブジェクトについて、
	 * 生成元のWKT表現が文字列として互いに等価ではない場合であっても、
	 * 区切り文字としての空白文字の有無やデフォルト値のSRID表記の有無といった
	 * 表記の揺れ以外の違いがない場合は等価であるとみなされます。
	 * たとえば、次の3つのWKT表現より生成されるオブジェクトは、等価であると
	 * みなされます。</p>
	 * <pre>
	 * POLYGON((0 0,10 0,10 10,0 10,0 0))
	 * POLYGON( (0 0,10 0,10 10,0 10,0 0) )
	 * POLYGON((0 0,10 0,10 10,0 10,0 0);-1)</pre>
	 *
	 * <p>一方、領域を構成する閉じた線の始点・終点位置が異なるなどして、
	 * WKT表現が文字列として等価になりえないものの同一の空間領域を指すオブジェクトは、
	 * 等価ではないとみなされます。
	 * たとえば、次の2つのWKT表現より生成されるオブジェクトは、等価ではないと
	 * みなされます。</p>
	 * <pre>
	 * POLYGON((0 0,10 0,10 10,0 10,0 0))
	 * POLYGON((0 10,0 0,10 0,10 10,0 10))</pre>
	 *
	 * <p>このメソッドは、{@link Object#hashCode()}にて定義されている汎用規約に
	 * 準拠します。したがって、等価なオブジェクトは等価なハッシュコードを保持します。</p>
	 *
	 * @param obj 比較対象の参照オブジェクト
	 *
	 * @return このオブジェクトが{@code obj}引数と同じである場合は{@code true}、
	 * それ以外の場合は{@code false}
	 *
	 * @see #hashCode()
	 * </div><div lang="en">
	 * Indicates whether some other object is "equal to" this one.
	 *
	 * <p>Objects generated by {@link #valueOf(String)} and have no notation
	 * difference except inconsistent spelling such as blank character as a
	 * delimiter or the default SRID values are considered to be equivalent
	 * even if WKT representation of the source is not equivalent to each other
	 * as a string.
	 * For example, objects generated with the following three WKT
	 * representation are considered to be equivalent.</p>
	 * <pre>
	 * POLYGON((0 0,10 0,10 10,0 10,0 0))
	 * POLYGON( (0 0,10 0,10 10,0 10,0 0) )
	 * POLYGON((0 0,10 0,10 10,0 10,0 0);-1)</pre>
	 *
	 * <p>On the other hand, objects which have no equivalent WKT representation
	 * as a string because of the difference in the start/end position to the
	 * closed line that make up the area are considered not to be equivalent
	 * even if they indicate to the same space region.
	 * For example, objects generated with the following two WKT representation
	 * are considered not to be equivalent.</p>
	 * <pre>
	 * POLYGON((0 0,10 0,10 10,0 10,0 0))
	 * POLYGON((0 10,0 0,10 0,10 10,0 10))</pre>
	 *
	 * <p>This method maintain the general contract for the
	 * {@link Object#hashCode()} method, which states that equal objects must
	 * have equal hash codes.</p>
	 *
	 * @param obj The reference object to be compared
	 *
	 * @return {@code true} if this object is equal to {@code obj}, otherwise
	 * {@code false}
	 *
	 * @see #hashCode()
	 * </div>
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Geometry other = (Geometry) obj;
		if (!Arrays.equals(bytesData, other.bytesData))
			return false;
		return true;
	}

}
